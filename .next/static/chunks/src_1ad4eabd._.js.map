{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/lib/auth.ts"],"sourcesContent":["export interface User {\n  email: string;\n  role: 'admin' | 'teacher' | 'student' | 'owner';\n}\n\nexport interface LoginResult {\n  success: boolean;\n  user?: User;\n  error?: string;\n}\n\nconst CREDENTIALS = {\n  'admin@gmail.com': { password: '123', role: 'admin' as const },\n  'teacher@gmail.com': { password: '123', role: 'teacher' as const },\n  'student@gmail.com': { password: '123', role: 'student' as const },\n  'owner@gmail.com': { password: '123', role: 'owner' as const },\n};\n\nexport function login(email: string, password: string): LoginResult {\n  try {\n    const credential = CREDENTIALS[email as keyof typeof CREDENTIALS];\n    \n    if (!credential) {\n      return {\n        success: false,\n        error: 'Invalid email or password'\n      };\n    }\n    \n    if (credential.password !== password) {\n      return {\n        success: false,\n        error: 'Invalid email or password'\n      };\n    }\n    \n    return {\n      success: true,\n      user: {\n        email,\n        role: credential.role\n      }\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: 'An error occurred during login'\n    };\n  }\n}\n\nexport function validateRole(userRole: string, allowedRoles: string[]): boolean {\n  return allowedRoles.includes(userRole);\n}\n"],"names":[],"mappings":";;;;AAWA,MAAM,cAAc;IAClB,mBAAmB;QAAE,UAAU;QAAO,MAAM;IAAiB;IAC7D,qBAAqB;QAAE,UAAU;QAAO,MAAM;IAAmB;IACjE,qBAAqB;QAAE,UAAU;QAAO,MAAM;IAAmB;IACjE,mBAAmB;QAAE,UAAU;QAAO,MAAM;IAAiB;AAC/D;AAEO,SAAS,MAAM,KAAa,EAAE,QAAgB;IACnD,IAAI;QACF,MAAM,aAAa,WAAW,CAAC,MAAkC;QAEjE,IAAI,CAAC,YAAY;YACf,OAAO;gBACL,SAAS;gBACT,OAAO;YACT;QACF;QAEA,IAAI,WAAW,QAAQ,KAAK,UAAU;YACpC,OAAO;gBACL,SAAS;gBACT,OAAO;YACT;QACF;QAEA,OAAO;YACL,SAAS;YACT,MAAM;gBACJ;gBACA,MAAM,WAAW,IAAI;YACvB;QACF;IACF,EAAE,OAAO,OAAO;QACd,OAAO;YACL,SAAS;YACT,OAAO;QACT;IACF;AACF;AAEO,SAAS,aAAa,QAAgB,EAAE,YAAsB;IACnE,OAAO,aAAa,QAAQ,CAAC;AAC/B","debugId":null}},
    {"offset": {"line": 70, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/context/AuthContext.tsx"],"sourcesContent":["'use client';\n\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { User, login as authLogin } from '@/lib/auth';\n\ninterface AuthContextType {\n  user: User | null;\n  login: (email: string, password: string) => Promise<{ success: boolean; error?: string }>;\n  logout: () => void;\n  isLoading: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Check if user is stored in localStorage\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      try {\n        setUser(JSON.parse(storedUser));\n      } catch (error) {\n        localStorage.removeItem('user');\n      }\n    }\n    setIsLoading(false);\n  }, []);\n\n  const login = async (email: string, password: string) => {\n    try {\n      const result = authLogin(email, password);\n      \n      if (result.success && result.user) {\n        setUser(result.user);\n        localStorage.setItem('user', JSON.stringify(result.user));\n        return { success: true };\n      } else {\n        return { success: false, error: result.error };\n      }\n    } catch (error) {\n      return { success: false, error: 'An unexpected error occurred' };\n    }\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout, isLoading }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;;;AAHA;;;AAYA,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAA+B;AAExD,SAAS,aAAa,EAAE,QAAQ,EAAiC;;IACtE,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAe;IAC9C,MAAM,CAAC,WAAW,aAAa,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IAE3C,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;kCAAE;YACR,0CAA0C;YAC1C,MAAM,aAAa,aAAa,OAAO,CAAC;YACxC,IAAI,YAAY;gBACd,IAAI;oBACF,QAAQ,KAAK,KAAK,CAAC;gBACrB,EAAE,OAAO,OAAO;oBACd,aAAa,UAAU,CAAC;gBAC1B;YACF;YACA,aAAa;QACf;iCAAG,EAAE;IAEL,MAAM,QAAQ,OAAO,OAAe;QAClC,IAAI;YACF,MAAM,SAAS,CAAA,GAAA,qHAAA,CAAA,QAAS,AAAD,EAAE,OAAO;YAEhC,IAAI,OAAO,OAAO,IAAI,OAAO,IAAI,EAAE;gBACjC,QAAQ,OAAO,IAAI;gBACnB,aAAa,OAAO,CAAC,QAAQ,KAAK,SAAS,CAAC,OAAO,IAAI;gBACvD,OAAO;oBAAE,SAAS;gBAAK;YACzB,OAAO;gBACL,OAAO;oBAAE,SAAS;oBAAO,OAAO,OAAO,KAAK;gBAAC;YAC/C;QACF,EAAE,OAAO,OAAO;YACd,OAAO;gBAAE,SAAS;gBAAO,OAAO;YAA+B;QACjE;IACF;IAEA,MAAM,SAAS;QACb,QAAQ;QACR,aAAa,UAAU,CAAC;IAC1B;IAEA,qBACE,6LAAC,YAAY,QAAQ;QAAC,OAAO;YAAE;YAAM;YAAO;YAAQ;QAAU;kBAC3D;;;;;;AAGP;GA3CgB;KAAA;AA6CT,SAAS;;IACd,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;IANgB","debugId":null}}]
}